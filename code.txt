#include <stdio.h>
#include<stdlib.h>
#include <time.h>

#include <SDL/SDL.h>
#include <SDL/SDL_image.h>
#include <SDL/SDL_ttf.h>
typedef struct{
   SDL_Surface *bus;
   SDL_Surface* busM;
   SDL_Surface *zoneVide;
   SDL_Surface *vide;
   SDL_Surface *codeRue3;
   SDL_Surface *codeRue12;
   SDL_Surface *codeRue5;
    SDL_Surface *codeRue6;
    SDL_Surface *codeRue7;
    SDL_Surface *codeRue9;
    SDL_Surface *codeRue10;
    SDL_Surface *codeRue15;
    SDL_Surface *zoneNonVideBus;
    SDL_Surface *zoneNonVideBM;
    SDL_Surface *OptionJeu;
    SDL_Surface *OptionCharger;
    SDL_Surface *Minute;
    SDL_Surface *Minuteclique;
    SDL_Surface *dixMinutes;
    SDL_Surface *dixMinutesclique;
}image;
typedef struct
{
    int minute;
    int heure;
    int jour;
} Horaire;
typedef struct
{
    int row;
    int column;
    int codeRue;
} Subdivision;
typedef struct
{
    int id;
    int idLigne;
    int sens;
    Horaire horaireDateDepart;
} Tache;
typedef struct
{
    int id;
    Horaire horaireDateSouhaite;
    Horaire dureeHeureMinute;
    int typeActivite;
    int idZoneSrc;
    int idZoneDest;
} Activite;
typedef struct destination
{
    int idLigne;
    int idZoneDest;
    struct destination * suivant;
} destination;
typedef struct destination * pileDestinations;
typedef struct
{
    int cin;
    int idZoneHabitat;
    int idZoneTravail;
    int idZoneCourante;
    int intentionVoyage;
    int idLigneCourante;
    int sensCourant;
    int idZoneDest;
    pileDestinations destinationsIntermediaires ;
    int nombreActivites;
    Activite activites[8];
} Personne;
/*typedef struct {
    Horaire horaireAlerte ;
    int nombrePassagersEnAttente;
    int maxDureeAttente;
    int minDureeAttente;
    int moyenneDureeAttente;
    struct alerte * suivant;
} alerte;
typedef alerte * pileAlertes;*/
typedef struct
{
    int id;
    int nombreZones;
    int idZones[20];
    /*pileAlertes pileAlertesSensAller;
    pileAlertes pileAlertesSensRetour;
    int gainNet;*/
} Ligne;
typedef struct
{
    int idZoneSrc;
    int idZoneDest;
    int distance;
    Horaire dureeAproximative;
    int nombresubdivisions;
    Subdivision parcours[80];
} Troncon;
typedef struct
{
    int zoneSrc;
    int zoneDest;
    int idLigne;
    int sens;
    int idBus;
    Horaire dateVente;
    Horaire horaireEmbarquement ;
    int distance;
    int prix;
} Ticket;
typedef struct emplacement
{
    int cinPersonne;
    Ticket tk;
    struct emplacement * suivant;
} emplacement;
typedef struct
{
    emplacement * tete;
    emplacement * queue;
} filePassagers;
typedef struct celluleFile
{
    filePassagers file;
    int idLigne;
    int sens;
    struct celluleFile * suivant ;
} celluleFile;
typedef celluleFile * listeFilesPassagers;
typedef struct
{
    int id;
    int row;
    int column;
    int nombrePersonnes;
    Personne personnes[300];
    listeFilesPassagers listeFilesPassagersEnAttente;
} Zone;
typedef struct
{
    int id;
    int idZoneCourante;
    int row;
    int column;
    int enRoute;
    int idLigneCourante;
    int sensCourant;
    int nombreTaches;
    Tache taches[10];
    int nombrePassagers;
    Personne passagers[300];
    int nombreTickets;
    Ticket tickets[2000];
    /*int distanceparcourue ;
    int coutsEtChargesParJour ;
    int prixLitreCarburant;
    int gainNet;*/
} Bus;
typedef struct
{
    int rue;
    int zone;
    int bus;
} Casecarte;
typedef struct Liaison
{
    struct Liaison* precedent;
    int idLigne;
    int idZoneLiaisonLigneSuivante;
    struct Liaison* suivant;
} Liaison;
typedef struct
{
    Liaison *premier;
    Liaison *dernier;
} listeLiaisons;
int estVide(listeLiaisons L)
{
    return L.premier== NULL ;
}
void ajouterEnTeteListeLiaisons (listeLiaisons *l, int idLigne, int
                                 idZoneLiaisonAvecSuivant)
{
    Liaison *nv=malloc(sizeof(Liaison));
    nv->idLigne=idLigne;
    nv->idZoneLiaisonLigneSuivante=idZoneLiaisonAvecSuivant;
    nv->precedent = NULL;
    if(estVide(*l))
    {
        nv->suivant=NULL;
        l->dernier=nv;
        l->premier=nv;
    }
    else
    {
        nv->suivant=l->premier;
        l->premier->precedent=nv;
        l->premier=nv;
    }
}
void ajouterEnFinListeLiaisons (listeLiaisons *l, int idLigne, int
                                idZoneLiaisonAvecSuivant)
{
    if(estVide(*l))
        ajouterEnTeteListeLiaisons(l,idLigne,idZoneLiaisonAvecSuivant);
    else
    {
        Liaison *nv=malloc(sizeof(Liaison));
        nv->idLigne=idLigne;
        nv->idZoneLiaisonLigneSuivante=idZoneLiaisonAvecSuivant;
        nv->suivant=NULL;
        l->dernier->suivant=nv;
        nv->precedent=l->dernier;
        l->dernier=nv;
    }
}
void chargerZones(Zone zones[], int *nombreZones)
{
    FILE *fic = fopen("zones.txt", "r");
    if (fic == NULL)
        exit(1);
    int i=-1;
    while (!feof(fic))
    {
        i++;
        fscanf(fic, "%d %d %d", &zones[i].id, &zones[i].row, &zones[i].column);
    }
    *nombreZones=i+1;
    fclose(fic);
}

void chargerLignes(Ligne lignes[], int *nombreLignes)
{
    FILE *fic = fopen("lignes.txt", "r");
    if (fic == NULL)
        exit(1);
    int i=-1,nbZ=0,j;
    while(!feof(fic))
    {
        if(nbZ==0)
        {
            i++;
            fscanf(fic, "%d %d", &lignes[i].id, &lignes[i].nombreZones);
            nbZ=lignes[i].nombreZones;
            j=0;
        }
        else
        {
            fscanf(fic,"%d",&lignes[i].idZones[j]);
            j++;
            nbZ--;
        }
    }
    *nombreLignes=i+1;
    fclose(fic);
}
void chargerTroncons(Troncon troncons[], int *nombreTroncons)
{
    FILE *fic =fopen("troncons.txt", "r");
    if (fic == NULL)
    {
        exit(1);
    }
    int i = -1, j,nbsub=0;
    while (!feof(fic))
    {
        if(nbsub==0)
        {
            i++;
            fscanf(fic,"%d %d %d %d %d %d %d",&troncons[i].idZoneSrc, &troncons[i].idZoneDest, &troncons[i].distance,
                   &troncons[i].dureeAproximative.jour, &troncons[i].dureeAproximative.heure, &troncons[i].dureeAproximative.minute, &troncons[i].nombresubdivisions);
            nbsub=troncons[i].nombresubdivisions;
            j=0;
        }
        else
        {
            fscanf(fic, "%d %d %d", &troncons[i].parcours[j].row, &troncons[i].parcours[j].column, &troncons[i].parcours[j].codeRue);
            j++;
            nbsub--;
        }
    }
    *nombreTroncons=i+1;
    fclose(fic);
}
void chargerFlotteBus(Bus flotteBus[], int *nombreBus)
{
    FILE *fic =fopen("flotteBus.txt", "r");
    if (fic == NULL)
        exit(1);
    int i = -1, j,nbTch=0;
    while (!feof(fic))
    {
        if(nbTch==0)
        {
            i++;
            fscanf(fic,"%d %d %d %d %d %d %d %d",&flotteBus[i].id,&flotteBus[i].idZoneCourante,&flotteBus[i].row
                   ,&flotteBus[i].column,&flotteBus[i].enRoute,&flotteBus[i].idLigneCourante,&flotteBus[i].sensCourant,&flotteBus[i].nombreTaches);
            nbTch=flotteBus[i].nombreTaches;
            j=0;
        }
        else
        {
            fscanf(fic,"%d %d %d %d %d %d",&flotteBus[i].taches[j].id,&flotteBus[i].taches[j].idLigne,&flotteBus[i].taches[j].sens,
                   &flotteBus[i].taches[j].horaireDateDepart.jour,&flotteBus[i].taches[j].horaireDateDepart.heure,&flotteBus[i].taches[j].horaireDateDepart.minute);
            j++;
            nbTch--;
        }
    }
    *nombreBus=i+1;
    fclose(fic);
}
void chargerLiaisons(listeLiaisons *l)
{
    FILE *fic = fopen("liaisons.txt", "r");
    if (fic == NULL)
    {
        exit(1);
    }

    int idLigne, idZoneLiaisonAvecSuivant;
    while (fscanf(fic, "%d %d", &idLigne, &idZoneLiaisonAvecSuivant) != EOF)
    {
        ajouterEnFinListeLiaisons(l, idLigne, idZoneLiaisonAvecSuivant);
    }

    fclose(fic);
}

void afficherZones(Zone zones[], int nombreZones)
{
    for (int i = 0; i < nombreZones; i++)
    {
        printf("%d %d %d\n", zones[i].id, zones[i].row, zones[i].column);
    }
}
void afficherLignes(Ligne lignes[], int nombreLignes)
{
    for (int i = 0; i < nombreLignes; i++)
    {
        printf("%d %d\n", lignes[i].id, lignes[i].nombreZones);
        for(int j=0; j<lignes[i].nombreZones; j++)
        {
            printf("%d\n",lignes[i].idZones[j]);
        }
    }
}
void afficherTroncons(Troncon troncons[], int nombreTroncons)
{
    for(int i=0; i<nombreTroncons; i++)
    {
        printf("%d %d %d %d %d %d %d\n", troncons[i].idZoneSrc, troncons[i].idZoneDest, troncons[i].distance,
               troncons[i].dureeAproximative.jour, troncons[i].dureeAproximative.heure, troncons[i].dureeAproximative
               .minute, troncons[i].nombresubdivisions);
        for (int j = 0; j < troncons[i].nombresubdivisions; j++)
        {
            printf("%d %d %d\n", troncons[i].parcours[j].row, troncons[i].parcours[j].column, troncons[i].parcours[j].codeRue);
        }
    }
}
void afficherFlotteBus(Bus flotteBus[], int nombreBus)
{
    for(int i=0; i<nombreBus; i++)
    {
        printf("%d %d %d %d %d %d %d %d\n",flotteBus[i].id,flotteBus[i].idZoneCourante,flotteBus[i].row
               ,flotteBus[i].column,flotteBus[i].enRoute,flotteBus[i].idLigneCourante,flotteBus[i].sensCourant,flotteBus[i].nombreTaches);
        for(int j=0; j<flotteBus[i].nombreTaches; j++)
            printf("%d %d %d %d %d %d\n",flotteBus[i].taches[j].id,flotteBus[i].taches[j].idLigne,flotteBus[i].taches[j].sens,
                   flotteBus[i].taches[j].horaireDateDepart.jour,flotteBus[i].taches[j].horaireDateDepart.heure,flotteBus[i].taches[j].horaireDateDepart.minute);
    }
}
void sauvegarderZones(Zone zones[], int nombreZones, char* zonesSauv)
{
    FILE *fic = fopen("zonesSauv.txt", "w");
    if (fic == NULL)
        exit(1);

    for(int i=0; i<nombreZones; i++)
    {
        fprintf(fic,"%d %d %d\n",zones[i].id, zones[i].row, zones[i].column);
    }
    fclose(fic);
}
void sauvegarderLignes(Ligne lignes[],int nombreLignes, char* lignesSauv)
{
    FILE *fic = fopen("lignesSauv.txt", "w");
    if (fic == NULL)
        exit(1);
    for (int i = 0; i < nombreLignes; i++)
    {
        fprintf(fic,"%d %d\n",lignes[i].id,lignes[i].nombreZones);
        for(int j=0; j<lignes[i].nombreZones; j++)
        {
            fprintf(fic,"%d\n",lignes[i].idZones[j]);
        }
    }
    fclose(fic);
}
void sauvegarderTroncons(Troncon troncons[], int nombreTroncons, char* tronconsSauv)
{
    FILE *fic = fopen("tronconsSauv.txt", "w");
    if (fic == NULL)
        exit(1);
    for(int i=0; i<nombreTroncons; i++)
    {
        fprintf(fic,"%d %d %d %d %d %d %d\n", troncons[i].idZoneSrc, troncons[i].idZoneDest, troncons[i].distance,
                troncons[i].dureeAproximative.jour, troncons[i].dureeAproximative.heure, troncons[i].dureeAproximative
                .minute, troncons[i].nombresubdivisions);
        for (int j = 0; j < troncons[i].nombresubdivisions; j++)
        {
            fprintf(fic,"%d %d %d\n", troncons[i].parcours[j].row, troncons[i].parcours[j].column, troncons[i].parcours[j].codeRue);
        }
    }
    fclose(fic);
}
void sauvegarderFlotteBus(Bus flotteBus[], int nombreBus, char* flotteBusSauv)
{
    FILE *fic = fopen("flotteBusSauv.txt", "w");
    if (fic == NULL)
        exit(1);
    for(int i=0; i<nombreBus; i++)
    {
        fprintf(fic,"%d %d %d %d %d %d %d %d\n",flotteBus[i].id,flotteBus[i].idZoneCourante,flotteBus[i].row
                ,flotteBus[i].column,flotteBus[i].enRoute,flotteBus[i].idLigneCourante,flotteBus[i].sensCourant,flotteBus[i].nombreTaches);
        for(int j=0; j<flotteBus[i].nombreTaches; j++)
            fprintf(fic,"%d %d %d %d %d %d\n",flotteBus[i].taches[j].id,flotteBus[i].taches[j].idLigne,flotteBus[i].taches[j].sens,
                    flotteBus[i].taches[j].horaireDateDepart.jour,flotteBus[i].taches[j].horaireDateDepart.heure,flotteBus[i].taches[j].horaireDateDepart.minute);
    }
    fclose(fic);
}
void sauvegarderLiaisons(listeLiaisons l, char* liaisonsSauv)
{
    FILE *fic = fopen(liaisonsSauv, "w");
    Liaison *current = l.premier;

    while (current != NULL)
    {
        fprintf(fic, "%d %d\n", current->idLigne, current->idZoneLiaisonLigneSuivante);
        current = current->suivant;
    }
    fclose(fic);
}

void affecterPersonneZone(Zone zones[], Personne pers)
{
    int j;
    j=zones[pers.idZoneHabitat].nombrePersonnes;
    zones[pers.idZoneHabitat].personnes[j]=pers;
    zones[pers.idZoneHabitat].nombrePersonnes++;
}
void genererPersonne(Zone zones[], int nombreZones, Ligne lignes[], int nombreLignes)
{
    srand(time(NULL));
    Personne pers;
    for(int i=0; i<300; i++)
    {
        pers.cin=i+1;
        pers.idZoneHabitat=rand()%20;
        do
        {
            pers.idZoneTravail=rand()%20;
        }
        while(pers.idZoneHabitat==pers.idZoneTravail);
        pers.idZoneCourante=pers.idZoneHabitat;
        pers.intentionVoyage=0;
        pers.idLigneCourante=-1;
        pers.sensCourant=-1;
        pers.idZoneDest=-1;
        pers.nombreActivites=3;
        //Activité 0
        pers.activites[0].id=0;
        pers.activites[0].horaireDateSouhaite.jour=0;
        pers.activites[0].horaireDateSouhaite.heure=6+rand()%3;
        pers.activites[0].horaireDateSouhaite.minute=0;
        pers.activites[0].dureeHeureMinute.jour=0;
        pers.activites[0].dureeHeureMinute.heure=8;
        pers.activites[0].dureeHeureMinute.minute=0;
        pers.activites[0].typeActivite=1;
        pers.activites[0].idZoneSrc=pers.idZoneHabitat;
        pers.activites[0].idZoneDest=pers.idZoneTravail;
        //Activite 1
        pers.activites[1].id=1;
        pers.activites[1].horaireDateSouhaite.jour=0;
        pers.activites[1].horaireDateSouhaite.heure=17;
        pers.activites[1].horaireDateSouhaite.minute=0;
        pers.activites[1].dureeHeureMinute.jour=0;
        pers.activites[1].dureeHeureMinute.heure=2;
        pers.activites[1].dureeHeureMinute.minute=0;
        pers.activites[1].typeActivite=2;
        pers.activites[1].idZoneSrc=pers.activites[0].idZoneDest;
        pers.activites[1].idZoneDest=rand()%20;
        while((pers.activites[1].idZoneDest==pers.idZoneTravail)||(pers.activites[1].idZoneDest==pers.idZoneHabitat))
            pers.activites[1].idZoneDest=rand()%20;
        //Activite 2
        pers.activites[2].id=2;
        pers.activites[2].horaireDateSouhaite.jour=0;
        pers.activites[2].horaireDateSouhaite.heure=19;
        pers.activites[2].horaireDateSouhaite.minute=0;
        pers.activites[2].dureeHeureMinute.jour=0;
        pers.activites[2].dureeHeureMinute.heure=1;
        pers.activites[2].dureeHeureMinute.minute=0;
        pers.activites[2].typeActivite=0;
        pers.activites[2].idZoneSrc=pers.activites[1].idZoneDest;
        pers.activites[2].idZoneDest=pers.idZoneHabitat;
        affecterPersonneZone(zones,pers);
    }
}
void afficherPersonnes(Zone zones[], int nombreZones)
{
    for(int i=0; i<nombreZones; i++)
    {
        printf("La zone numéro %d:\n",i);
        for(int j=0; j<zones[i].nombrePersonnes; j++)
        {
            printf("%d %d %d %d %d %d %d %d %d\n",zones[i].personnes[j].cin,zones[i].personnes[j].idZoneHabitat,zones[i].personnes[j].idZoneTravail,
                   zones[i].personnes[j].idZoneCourante,zones[i].personnes[j].intentionVoyage,zones[i].personnes[j].idLigneCourante,zones[i].personnes[j].sensCourant,zones[i].personnes[j].idZoneDest,
                   zones[i].personnes[j].nombreActivites);

            for(int c=0; c<zones[i].personnes[j].nombreActivites; c++)
            {
                Activite o=zones[i].personnes[j].activites[c];
                printf("%d %d %d %d %d %d %d %d %d %d\n",o.id,o.horaireDateSouhaite.jour,o.horaireDateSouhaite.heure,o.horaireDateSouhaite.minute,o.dureeHeureMinute.jour,o.dureeHeureMinute.heure,o.dureeHeureMinute.minute,
                       o.typeActivite,o.idZoneSrc,o.idZoneDest);
            }
        }
    }
}

void sauvegarderPersonnes(Zone zones[], int nombreZones, char* personnes_sauv)
{
    FILE *fic = fopen("personnes_sauv.txt", "w");
    if (fic == NULL)
        exit(1);
    for(int i=0; i<nombreZones; i++)
    {
        for(int j=0; j<zones[i].nombrePersonnes; j++)
        {
            fprintf(fic,"%d %d %d %d %d %d %d %d %d\n",zones[i].personnes[j].cin,zones[i].personnes[j].idZoneHabitat,zones[i].personnes[j].idZoneTravail,
                    zones[i].personnes[j].idZoneCourante,zones[i].personnes[j].intentionVoyage,zones[i].personnes[j].idLigneCourante,zones[i].personnes[j].sensCourant,zones[i].personnes[j].idZoneDest,
                    zones[i].personnes[j].nombreActivites);

            for(int c=0; c<zones[i].personnes[j].nombreActivites; c++)
            {
                Activite o=zones[i].personnes[j].activites[c];
                fprintf(fic,"%d %d %d %d %d %d %d %d %d %d\n",o.id,o.horaireDateSouhaite.jour,o.horaireDateSouhaite.heure,o.horaireDateSouhaite.minute,o.dureeHeureMinute.jour,o.dureeHeureMinute.heure,o.dureeHeureMinute.minute,
                        o.typeActivite,o.idZoneSrc,o.idZoneDest);
            }
        }
    }
    fclose(fic);
}
void chargerPersonnes(Zone zones[], int* nombreZones, char* personnes_sauv)
{
    FILE *fic = fopen("personnes_sauv.txt", "r");
    if (fic == NULL)
        exit(1);
    int nbAct=0,k,j=-1;
    Personne pers;
    while(!feof(fic))
    {
        if(nbAct==0)
        {
            j++;
            fscanf(fic,"%d %d %d %d %d %d %d %d %d",&pers.cin,&pers.idZoneHabitat,&pers.idZoneTravail,
                   &pers.idZoneCourante,&pers.intentionVoyage,&pers.idLigneCourante,&pers.sensCourant,&pers.idZoneDest,
                   &pers.nombreActivites);
            nbAct=pers.nombreActivites;
            k=0;
        }
        else
        {
            Activite act=pers.activites[k];
            fscanf(fic,"%d %d %d %d %d %d %d %d %d %d",&act.id,&act.horaireDateSouhaite.jour,&act.horaireDateSouhaite.heure,&act.horaireDateSouhaite.minute,&act.dureeHeureMinute.jour,&act.dureeHeureMinute.heure,&act.dureeHeureMinute.minute,
                   &act.typeActivite,&act.idZoneSrc,&act.idZoneDest);
            k++;
            nbAct--;
        }
    }
    fclose(fic);
}
int calculerDistance(int idZoneSrc, int idZoneDest, Ligne lignes[], int idLigne, Troncon troncons[], int nombreLignes, int nombreTroncons)
{
    int dist = 0;
    int pos1 = -1, pos2 = -1;

    // Trouver les positions des zones source et destination dans la ligne
    for (int j = 0; j < lignes[idLigne].nombreZones; j++)
    {
        if (lignes[idLigne].idZones[j] == idZoneSrc)
            pos1 = j;
        if (lignes[idLigne].idZones[j] == idZoneDest)
            pos2 = j;
    }

    // Si l'une des zones n'a pas été trouvée, renvoyer une distance nulle
    if (pos1 == -1 || pos2 == -1)
        return 0;

    // Calcul de la distance en fonction de l'ordre des zones
    if (pos1 < pos2)
    {
        for (int i = pos1; i < pos2; i++)
        {
            // Vérifier que le tronçon appartient bien à la ligne donnée
            for (int k = 0; k < nombreTroncons; k++)
            {
                if (troncons[k].idZoneSrc == lignes[idLigne].idZones[i] && troncons[k].idZoneDest == lignes[idLigne].idZones[i + 1])
                {
                    dist += troncons[k].distance;
                    break;
                }
            }
        }
    }
    else
    {
        for (int i = pos1; i > pos2; i--)
        {
            // Vérifier que le tronçon appartient bien à la ligne donnée
            for (int k = 0; k < nombreTroncons; k++)
            {
                if (troncons[k].idZoneSrc == lignes[idLigne].idZones[i - 1] && troncons[k].idZoneDest == lignes[idLigne].idZones[i])
                {
                    dist += troncons[k].distance;
                    break;
                }
            }
        }
    }

    return dist;
}

void initialiserCarte(Casecarte carteGeographique[40][40], Zone zones[], Ligne lignes[], Troncon troncons[], Bus
                      flotteBus[], int nombreZones, int nombreLignes, int nombreTroncons, int nombreBus)
{
    //initialisation
    for(int i=0; i<40; i++)
    {
        for(int j=0; j<40; j++)
        {
            carteGeographique[i][j].rue=0;
            carteGeographique[i][j].zone=-1;
            carteGeographique[i][j].bus=-1;
        }
    }
    int r,c;
    for(int i=0; i<nombreZones; i++)
    {
        r=zones[i].row;
        c=zones[i].column;
        carteGeographique[r][c].zone=zones[i].id;
    }
    for(int i=0; i<nombreBus; i++)
    {
        r=flotteBus[i].row;
        c=flotteBus[i].column;
        if(carteGeographique[r][c].bus==-1)
            carteGeographique[r][c].bus=flotteBus[i].id;
        else
            carteGeographique[r][c].bus=100;
    }
    for(int i=0; i<nombreTroncons; i++)
    {
        for(int j=0; j<troncons[i].nombresubdivisions; j++)
        {
            r=troncons[i].parcours[j].row;
            c=troncons[i].parcours[j].column;
            carteGeographique[r][c].rue=troncons[i].parcours[j].codeRue;
        }
    }
}
void afficherCarteGeo(image images,SDL_Surface *ecran,Casecarte carteGeographique[40][40], Zone zones[], Bus flotteBus[], int nombreZones,
                      int nombreLignes, int nombreTroncons, int nombreBus,SDL_Color noir,TTF_Font *font)
{

    SDL_Rect position;
    SDL_Rect positionTexte;

    font = TTF_OpenFont("Roboto-Regular.ttf", 10);
    // éffacement de l'écran
    SDL_FillRect(ecran, NULL, SDL_MapRGB(ecran->format, 255, 255, 255));

    // Affichage de la carte géographique
    for (int i=0; i<40; i++)
    {
        for (int j=0; j<40; j++)
        {
            position.x=j*35;
            position.y=i*35;
            positionTexte.x=j*35;
            positionTexte.y=i*35 -10;


            if ((carteGeographique[i][j].zone != -1) && (carteGeographique[i][j].bus == -1))
            {
                SDL_BlitSurface(images.zoneVide, NULL, ecran, &position);
            }
            else if ((carteGeographique[i][j].zone != -1) && (carteGeographique[i][j].bus != -1))
            {
                if (carteGeographique[i][j].bus < 100)
                    SDL_BlitSurface(images.zoneNonVideBus, NULL, ecran, &position);

                else
                    SDL_BlitSurface(images.zoneNonVideBM, NULL, ecran, &position);

                char texteAffiche[50];
                sprintf(texteAffiche, "zone %d",carteGeographique[i][j].zone);
                SDL_Surface *surfaceTexteZone = TTF_RenderText_Blended(font, texteAffiche, noir);
                SDL_BlitSurface(surfaceTexteZone,NULL,ecran,&positionTexte);

                SDL_FreeSurface(surfaceTexteZone);
            }
            else if (carteGeographique[i][j].bus != -1)
            {
                if (carteGeographique[i][j].bus < 100)
                {
                      SDL_BlitSurface(images.bus, NULL, ecran, &position);

                      char texteAffiche[50];
                      sprintf(texteAffiche, "Bus %d",flotteBus[carteGeographique[i][j].bus].id);
                       SDL_Surface *surfaceTexteBus = TTF_RenderText_Blended(font, texteAffiche, noir);
                       SDL_BlitSurface(surfaceTexteBus,NULL,ecran,&positionTexte);

                        SDL_FreeSurface(surfaceTexteBus);
                }
                else
                    SDL_BlitSurface(images.busM, NULL, ecran, &position);

            }
            else if (carteGeographique[i][j].rue == 3)
                SDL_BlitSurface(images.codeRue3, NULL, ecran, &position);
            else if (carteGeographique[i][j].rue == 12)
                SDL_BlitSurface(images.codeRue12, NULL, ecran, &position);
            else if (carteGeographique[i][j].rue == 5)
                SDL_BlitSurface(images.codeRue5, NULL, ecran, &position);
            else if (carteGeographique[i][j].rue == 6)
                SDL_BlitSurface(images.codeRue6, NULL, ecran, &position);
            else if(carteGeographique[i][j].rue == 7)
                SDL_BlitSurface(images.codeRue7, NULL, ecran, &position);
            else if (carteGeographique[i][j].rue == 9)
                SDL_BlitSurface(images.codeRue9, NULL, ecran, &position);
            else if (carteGeographique[i][j].rue == 10)
                SDL_BlitSurface(images.codeRue10, NULL, ecran, &position);
            else if (carteGeographique[i][j].rue == 15)
                SDL_BlitSurface(images.codeRue15, NULL, ecran, &position);
            }
    }

}

void ajouterEnFinListeFilesPassagers(listeFilesPassagers *l, filePassagers f, int
                                     idLigne, int sens)
{
    celluleFile* n=(celluleFile*)malloc(sizeof(celluleFile));
    n->file=f;
    n->idLigne=idLigne;
    n->sens=sens;
    n->suivant=NULL;
    if(*l == NULL)
    {
        (*l)=n;
    }
    else
    {
        celluleFile* p=*l;
        while(p->suivant!=NULL)
        {
            p=p->suivant;
        }
        p->suivant=n;
    }
}
void creerListe(listeFilesPassagers* l)
{
    (*l)=NULL;
}
void initialiserListesFilePassagers(Ligne lignes[], int nombreLignes, Zone zones[])
{
    for (int i = 0; i < nombreLignes; i++)
    {
        for (int j = 0; j < lignes[i].nombreZones; j++)
        {
            int c = 0;
            while (zones[c].id != lignes[i].idZones[j])
            {
                c++;
            }

            // Initialisation d'une nouvelle file vide
            filePassagers nouvelleFile = { NULL, NULL };

            // Ajouter deux files : une pour chaque sens (0 et 1)
            ajouterEnFinListeFilesPassagers(&zones[c].listeFilesPassagersEnAttente, nouvelleFile, i, 0);
            ajouterEnFinListeFilesPassagers(&zones[c].listeFilesPassagersEnAttente, nouvelleFile, i, 1);
        }
    }
}


void remplissageComplet(Zone zones[], Ligne lignes[], Troncon troncons[], Bus flotteBus[], int*
                        nombreZones, int* nombreLignes, int* nombreTroncons, int* nombreBus,listeLiaisons *liaisons)
{
    chargerZones(zones,&(*nombreZones));
    chargerLignes(lignes,&(*nombreLignes));
    chargerTroncons(troncons,&(*nombreTroncons));
    chargerFlotteBus(flotteBus,&(*nombreBus));
    chargerLiaisons(liaisons);
    for(int i=0; i<*nombreZones; i++)
    {
        creerListe(&zones[i].listeFilesPassagersEnAttente);
    }
    initialiserListesFilePassagers(lignes,*nombreLignes,zones);
}
void affichageComplet(Zone zones[], Ligne lignes[], Troncon troncons[], Bus flotteBus[], int
                      nombreZones, int nombreLignes, int nombreTroncons, int nombreBus)
{
    printf("Les zones:\n");
    afficherZones(zones,nombreZones);
    printf("Les lignes:\n");
    afficherLignes(lignes,nombreLignes);
    printf("Les troncons:\n");
    afficherTroncons(troncons,nombreTroncons);
    printf("Les bus:\n");
    afficherFlotteBus(flotteBus,nombreBus);
    printf("Les personnes:\n");
    afficherPersonnes(zones,nombreZones);
}
void sauvegardeComplete(Zone zones[], Ligne lignes[], Troncon troncons[], Bus flotteBus[], int
                        nombreZones, int nombreLignes, int nombreTroncons, int nombreBus, listeLiaisons l, char*
                        nomFichier)
{
    sauvegarderZones(zones,nombreZones,"zonesSauv.txt");
    sauvegarderLignes(lignes,nombreLignes,"lignesSauv.txt");
    sauvegarderTroncons(troncons,nombreTroncons,"tronconsSauv.txt");
    sauvegarderFlotteBus(flotteBus,nombreBus,"flotteBusSauv.txt");
    sauvegarderPersonnes(zones,nombreZones,"personnes_sauv.txt");
    sauvegarderLiaisons(l,"liaisonsSauv.txt");
}
int numTacheSuivante(Horaire horaireCourant, int idBusCourant, Bus flotteBus[])
{
    int i=0;
    int num;
    while(i<flotteBus[idBusCourant].nombreTaches && ((flotteBus[idBusCourant].taches[i].horaireDateDepart.jour!=horaireCourant.jour)||(flotteBus[idBusCourant].taches[i].horaireDateDepart.heure!=horaireCourant.heure)
            ||(flotteBus[idBusCourant].taches[i].horaireDateDepart.minute!=horaireCourant.minute)))
    {
        i++;
    }
    if(i>=flotteBus[idBusCourant].nombreTaches)
        num=-1;
    else
        num=flotteBus[idBusCourant].taches[i].id;
    return num;
}
void deplacerBus(Casecarte carteGeographique[40][40], int idBusCourant, Zone zones[], Ligne lignes[], Troncon troncons[], Bus flotteBus[], int nombreZones, int nombreLignes, int nombreTroncons, int nombreBus, Horaire horaireCourant)
{
    int i = 0, j = 0, dest, a = 0, r, c, r1, c1;
    //Spécifier la ligne
    if(idBusCourant>=0 && idBusCourant<=5)
        i=0;
    else if(idBusCourant>=6 && idBusCourant<=11)
        i=1;
    else
        i=2;
    // Trouver l'indice de la zone actuelle du bus dans la ligne
    while (flotteBus[idBusCourant].idZoneCourante != lignes[i].idZones[j])
    {
        j++;
    }
    // Déterminer la destination du bus sur la ligne
    if (flotteBus[idBusCourant].sensCourant == 0)
        dest = j + 1;
    else
        dest = j - 1;

    int k = 0;
    // Trouver le tronçon correspondant à la prochaine étape du bus
    if (flotteBus[idBusCourant].sensCourant == 0)
    {
        while ((k < nombreTroncons) && ((flotteBus[idBusCourant].idZoneCourante != troncons[k].idZoneSrc) || (lignes[i].idZones[dest] != troncons[k].idZoneDest)))
        {
            k++;
        }
    }
    else
    {
        while ((k < nombreTroncons) && ((flotteBus[idBusCourant].idZoneCourante != troncons[k].idZoneDest) || (lignes[i].idZones[dest] != troncons[k].idZoneSrc)))
            k++;
    }
    // Trouver la position actuelle du bus sur le tronçon
    while ((a < troncons[k].nombresubdivisions) && ((troncons[k].parcours[a].row != flotteBus[idBusCourant].row) || (troncons[k].parcours[a].column != flotteBus[idBusCourant].column)))
    {
        a++;
    }
    // Déplacer le bus selon le sens courant
    //Le bus se trouve dans la 1ere subdivision dans le sens 0
    if ((flotteBus[idBusCourant].sensCourant == 0) && (flotteBus[idBusCourant].row == zones[troncons[k].idZoneSrc].row)
            && (flotteBus[idBusCourant].column == zones[troncons[k].idZoneSrc].column)
            &&(a==troncons[k].nombresubdivisions))
    {
        r = troncons[k].parcours[0].row;
        c = troncons[k].parcours[0].column;
        carteGeographique[r][c].bus = flotteBus[idBusCourant].id;
        flotteBus[idBusCourant].row = r;
        flotteBus[idBusCourant].column = c;
        //probleme en k
        if(k==0 || k==5 || k==13)
        {
            int nb=0,pos;
            for(int b=0; b<nombreBus; b++)
            {
                if((flotteBus[b].row==zones[troncons[k].idZoneSrc].row)&&(flotteBus[b].column==zones[troncons[k].idZoneSrc].column))
                {
                    nb++;
                    pos=b;
                }
            }
            if(nb==0)
                carteGeographique[zones[troncons[k].idZoneSrc].row][zones[troncons[k].idZoneSrc].column].bus = -1;
            else if(nb==1)
                carteGeographique[zones[troncons[k].idZoneSrc].row][zones[troncons[k].idZoneSrc].column].bus = flotteBus[pos].id;
            else
                carteGeographique[zones[troncons[k].idZoneSrc].row][zones[troncons[k].idZoneSrc].column].bus = 100;
        }
        else
        {
            carteGeographique[zones[troncons[k].idZoneSrc].row][zones[troncons[k].idZoneSrc].column].bus = -1;
        }
    }
    //Le bus se trouve dans la 1ere subdivison du zone dans le sens 1
    else if ((flotteBus[idBusCourant].sensCourant == 1) && (flotteBus[idBusCourant].row == zones[troncons[k].idZoneDest].row)
             && (flotteBus[idBusCourant].column == zones[troncons[k].idZoneDest].column)
             &&(a==troncons[k].nombresubdivisions))
    {
        r = troncons[k].parcours[troncons[k].nombresubdivisions - 1].row;
        c = troncons[k].parcours[troncons[k].nombresubdivisions - 1].column;
        carteGeographique[r][c].bus = flotteBus[idBusCourant].id;
        flotteBus[idBusCourant].row = r;
        flotteBus[idBusCourant].column = c;
        if(k==4 || k==12 || k==18 )
        {
            int nb1=0,pos;
            for(int b=0; b<nombreBus; b++)
            {
                if((flotteBus[b].row==zones[troncons[k].idZoneDest].row)&&(flotteBus[b].column==zones[troncons[k].idZoneDest].column))
                {
                    nb1++;
                    pos=b;
                }
            }
            if(nb1==0)
                carteGeographique[zones[troncons[k].idZoneDest].row][zones[troncons[k].idZoneDest].column].bus = -1;
            else if(nb1==1)
                carteGeographique[zones[troncons[k].idZoneDest].row][zones[troncons[k].idZoneDest].column].bus = flotteBus[pos].id;
            else
            {
                carteGeographique[zones[troncons[k].idZoneDest].row][zones[troncons[k].idZoneDest].column].bus = 100;
            }
        }
        else
            carteGeographique[zones[troncons[k].idZoneDest].row][zones[troncons[k].idZoneDest].column].bus = -1;
    }
    //Le bus se trouve dans la derniére subdivision du troncons dans le sens 0

    else if ((a == troncons[k].nombresubdivisions -1 ) && (flotteBus[idBusCourant].sensCourant == 0))
    {
        r = zones[troncons[k].idZoneDest].row;
        c = zones[troncons[k].idZoneDest].column;
        if(carteGeographique[r][c].bus==-1)
            carteGeographique[r][c].bus = flotteBus[idBusCourant].id;
        else
            carteGeographique[r][c].bus = 100;

        flotteBus[idBusCourant].row = r;
        flotteBus[idBusCourant].column = c;
        r1 = troncons[k].parcours[a].row;
        c1 = troncons[k].parcours[a].column;
        carteGeographique[r1][c1].bus = -1;
        //terminus
        if (troncons[k].idZoneDest == lignes[i].idZones[lignes[i].nombreZones-1])
        {
            flotteBus[idBusCourant].enRoute = 0;
        }
        flotteBus[idBusCourant].idZoneCourante=troncons[k].idZoneDest;
    }
    //Le bus se trouve dans la derniére subdivision du troncons dans le sens 1
    else if ((a == 0) && (flotteBus[idBusCourant].sensCourant == 1))
    {
        r = zones[troncons[k].idZoneSrc].row;
        c = zones[troncons[k].idZoneSrc].column;
        if(carteGeographique[r][c].bus==-1)
            carteGeographique[r][c].bus = flotteBus[idBusCourant].id;
        else
            carteGeographique[r][c].bus = 100;

        flotteBus[idBusCourant].row = r;
        flotteBus[idBusCourant].column = c;
        r1 = troncons[k].parcours[a].row;
        c1 = troncons[k].parcours[a].column;
        carteGeographique[r1][c1].bus = -1;
        //terminus
        if (troncons[k].idZoneSrc == lignes[i].idZones[0])
        {
            flotteBus[idBusCourant].enRoute = 0;
        }
        flotteBus[idBusCourant].idZoneCourante=troncons[k].idZoneSrc;
    }
    else
    {
        if (flotteBus[idBusCourant].sensCourant == 0)
        {
            r = troncons[k].parcours[a + 1].row;
            c = troncons[k].parcours[a + 1].column;
            if(carteGeographique[r][c].bus ==-1)
                carteGeographique[r][c].bus = flotteBus[idBusCourant].id;
            else
                carteGeographique[r][c].bus=100;
        }
        else if(flotteBus[idBusCourant].sensCourant == 1)
        {
            r = troncons[k].parcours[a - 1].row;
            c = troncons[k].parcours[a - 1].column;
            if(carteGeographique[r][c].bus ==-1)
                carteGeographique[r][c].bus = flotteBus[idBusCourant].id;
            else
                carteGeographique[r][c].bus=100;
        }
        flotteBus[idBusCourant].row = r;
        flotteBus[idBusCourant].column = c;
        r1 = troncons[k].parcours[a].row;
        c1 = troncons[k].parcours[a].column;
        carteGeographique[r1][c1].bus = -1;
    }
}

int numActiviteSuivante(Horaire horaireCourant,int idPersonne,int idZone,Zone zones[])
{
    int i=0;
    int num;
    int z=zones[idZone].personnes[idPersonne].idZoneCourante;
    int nbAct=zones[z].personnes[idPersonne].nombreActivites;
    while(i<nbAct)
    {
        if(zones[z].personnes[idPersonne].activites[i].horaireDateSouhaite.jour!=horaireCourant.jour || zones[z].personnes[idPersonne].activites[i].horaireDateSouhaite.heure!=horaireCourant.heure
                ||zones[z].personnes[idPersonne].activites[i].horaireDateSouhaite.minute!=horaireCourant.minute)
            i++;
        else
            break;
    }
    if(i>=zones[z].personnes[idPersonne].nombreActivites)
        num=-1;
    else
        num=zones[z].personnes[idPersonne].activites[i].id;
    return num;
}
void deplacerPersonne(Personne src[], Personne dest[], int indicePersonneSrc, int*
                      nombrePersonnesSrc, int* nombrePersonnesDest)
{
    //copier la personne dans  le tableau destination
    dest[*nombrePersonnesDest]=src[indicePersonneSrc];
    (*nombrePersonnesDest)++;
    //supprimer la personne du tableau src
    for(int i=indicePersonneSrc; i<*nombrePersonnesSrc; i++)
        src[i]=src[i+1];
    (*nombrePersonnesSrc)--;
}
void empilerPileDestinations(pileDestinations* p, int idLigne, int idZoneDest)
{
    destination *n=(destination*)malloc(sizeof(destination));
    n->idLigne=idLigne;
    n->idZoneDest=idZoneDest;
    n->suivant=*p;
    *p=n;
}
void depilerPileDestinations(pileDestinations* p)
{
    if(*p != NULL)
    {
        destination *n=*p;
        *p=n->suivant;
        free(n);
    }
}
void rechercherLignes(int idZoneSrcInitiale, int idZoneDestFinale, int*
                      idLigneZoneSrc, int* idLigneZoneDest, Ligne lignes[], int nombreLignes)
{
    //Chercher ligne src
    int found=0,i=0;
    while(i<nombreLignes && !found)
    {
        for(int j=0; j<lignes[i].nombreZones; j++)
        {
            if(idZoneSrcInitiale==lignes[i].idZones[j])
            {
                found=1;
                (*idLigneZoneSrc)=i;
                break;
            }
        }
        i++;
    }
    //chercher ligne dest
    found=0,i=0;
    while(i<nombreLignes && !found)
    {
        for(int j=0; j<lignes[i].nombreZones; j++)
        {
            if(idZoneDestFinale==lignes[i].idZones[j])
            {
                found=1;
                (*idLigneZoneDest)=i;
                break;
            }
        }
        i++;
    }
}
int rechercherSens(int idZoneSrcIntermediaire, int idZoneDestIntermediaire, int
                   idLigne, Ligne lignes[])
{
    int pos1,pos2;
    for(int j=0; j<lignes[idLigne].nombreZones; j++)
    {
        if (lignes[idLigne].idZones[j]==idZoneSrcIntermediaire)
            pos1=j;
        else if(lignes[idLigne].idZones[j]==idZoneDestIntermediaire)
            pos2=j;
    }

    if(pos1>pos2)
        return 1;
    else
        return 0;
}
void remplirPileDestinations (pileDestinations* p, listeLiaisons l, int
                              idZoneSrcInitiale, int idZoneDestFinale,Ligne lignes[], int nombreLignes,Personne pers)
{
    (*p) = NULL;
    int idLigneSrc,idLigneDest,foundZoneSrc=0,founZoneDest=0;
    Liaison* pt2;
    rechercherLignes(idZoneSrcInitiale,idZoneDestFinale,&idLigneSrc,&idLigneDest,lignes,nombreLignes);
    //ajouter la zone destination au fin du pile
    empilerPileDestinations(p,idLigneDest,idZoneDestFinale);

    //si la meme ligne en empile une seule fois
    if(idLigneSrc == idLigneDest)
    {
        return ;
    }
    //chercher ou est le source
    Liaison* pt1=l.premier;
    while(foundZoneSrc==0 && founZoneDest==0 && pt1!=NULL)
    {
        if(pt1->idLigne==idLigneSrc)
        {
            foundZoneSrc=1;
        }
        else if(pt1->idLigne==idLigneDest)
        {
            founZoneDest=1;
        }
        else
            pt1=pt1->suivant;
    }

    //cas de precedent(src avant dest)
    if(foundZoneSrc==1)
    {
        int found=0;
        Liaison* pt=l.premier;
        while(pt!=NULL && found==0)
        {
            if(pt->idLigne==idLigneDest)
            {
                found=1;
            }
            else
                pt=pt->suivant;
        }

        //prochaine zoneIntermédiaire
        pt2=pt;
        while(pt2!=NULL && pt2->idLigne!=idLigneSrc)
        {
            pt2=pt2->precedent;
            if(idZoneDestFinale==pt2->idZoneLiaisonLigneSuivante)
            {
                depilerPileDestinations(p);

            }
            empilerPileDestinations(p,pt2->idLigne,pt2->idZoneLiaisonLigneSuivante);
        }
    }
    //cas de suivant(dest avant src)
    else
    {
        //prochaine zoneIntermédiaire
        pt2=pt1;
        while(pt2!=NULL && pt2->idLigne!=idLigneSrc)
        {
            pt2=pt2->suivant;
            if(idZoneDestFinale==pt2->precedent->idZoneLiaisonLigneSuivante)
            {
                depilerPileDestinations(p);
            }
            empilerPileDestinations(p,pt2->idLigne,pt2->precedent->idZoneLiaisonLigneSuivante);
        }
    }
    //Eviter les doublants
    if(*p!=NULL && idZoneSrcInitiale==(*p)->idZoneDest)
    {
        depilerPileDestinations(p);
    }

}

void prochaineDestinationIntermediaire(pileDestinations* p,int* idLigne, int*
                                       idZoneDest)
{
    if(*p!=NULL)
    {
        *idLigne=(*p)->idLigne;
        *idZoneDest=(*p)->idZoneDest;
    }
}
int vide_file(filePassagers f)
{
    return (f.tete == NULL) && (f.queue == NULL);
}
void enfilerFilePassagers(filePassagers * f, int cin,Ticket t)
{
    emplacement * n;
    n = (emplacement*)malloc(sizeof(emplacement));
    n->cinPersonne= cin;
    n->tk=t;
    n->suivant = NULL;
    if(vide_file(*f))
        f->tete = n;
    else
        f->queue->suivant = n;
    f->queue = n;
}
void defilerFilePassagers (filePassagers* f)
{
    emplacement* n;
    n = f->tete;
    if(n->suivant == NULL)
    {
        f->tete = NULL;
        f->queue = NULL;
        free(n);
    }
    else
    {
        f->tete = n->suivant;
        free(n);
    }
}
int calculerPrix(int distance)
{
    int prix=0;
    prix=(distance+30)*10;
    return prix;
}
Ticket venteTicket(Horaire horaireVente, int idZoneSrc, int idZoneDest, int idLigne, int sens, Ligne lignes[],
                   Troncon troncons[], int nombreLignes, int nombreTroncons)
{
    Ticket tickets;
    tickets.zoneSrc=idZoneSrc;
    tickets.zoneDest=idZoneDest;
    tickets.dateVente=horaireVente;
    tickets.dateVente.jour=horaireVente.jour;
    tickets.dateVente.heure=horaireVente.heure;
    tickets.dateVente.minute=horaireVente.minute;
    tickets.idLigne=idLigne;
    tickets.sens=sens;
    tickets.idBus=-1;
    tickets.horaireEmbarquement.jour=-1;
    tickets.horaireEmbarquement.heure=-1;
    tickets.horaireEmbarquement.minute=-1;
    tickets.distance=calculerDistance(idZoneSrc,idZoneDest,lignes,tickets.idLigne,troncons,nombreLignes,nombreTroncons);
    tickets.prix=calculerPrix(tickets.distance);

    return tickets;
}
void majPersonnesUneZone(Horaire horaireCourant,Zone zones[], int idZone, Ligne lignes[], int
                         nombreLignes, Troncon troncons[], int nombreTroncons,listeLiaisons l)
{
    for(int i=0; i<zones[idZone].nombrePersonnes; i++)
    {
        for(int j=0; j<zones[idZone].personnes[i].nombreActivites; j++)
        {
            if((horaireCourant.jour==zones[idZone].personnes[i].activites[j].horaireDateSouhaite.jour
                    &&horaireCourant.heure==zones[idZone].personnes[i].activites[j].horaireDateSouhaite.heure
                    &&horaireCourant.minute==zones[idZone].personnes[i].activites[j].horaireDateSouhaite.minute))
            {
                zones[idZone].personnes[i].intentionVoyage=1;
                zones[idZone].personnes[i].idZoneCourante=zones[idZone].personnes[i].activites[j].idZoneSrc;
                remplirPileDestinations(&zones[idZone].personnes[i].destinationsIntermediaires,l
                                        ,zones[idZone].personnes[i].activites[j].idZoneSrc,zones[idZone].personnes[i].activites[j].idZoneDest
                                        ,lignes,nombreLignes,zones[idZone].personnes[i]);
                prochaineDestinationIntermediaire(&zones[idZone].personnes[i].destinationsIntermediaires,&zones[idZone].personnes[i].idLigneCourante
                                                  ,&zones[idZone].personnes[i].idZoneDest);
                zones[idZone].personnes[i].sensCourant=rechercherSens(zones[idZone].personnes[i].idZoneCourante,zones[idZone].personnes[i].idZoneDest,
                                                       zones[idZone].personnes[i].idLigneCourante,lignes);

                //chercher quelle file à remplir
                celluleFile *p=zones[idZone].listeFilesPassagersEnAttente;
                while (p != NULL &&
                        (p->idLigne != zones[idZone].personnes[i].destinationsIntermediaires->idLigne ||
                         p->sens != zones[idZone].personnes[i].sensCourant))
                {
                    p = p->suivant;
                }
                if(p!=NULL)
                {
                    Ticket tk=venteTicket(horaireCourant,idZone,zones[idZone].personnes[i].idZoneDest,zones[idZone].personnes[i].idLigneCourante,
                                          zones[idZone].personnes[i].sensCourant,lignes,troncons,nombreLignes,nombreTroncons);
                    enfilerFilePassagers(&p->file,zones[idZone].personnes[i].cin,tk);
                }
            }
        }
    }
}
void majPersonnesToutesZones(Horaire horaireCourant, Zone zones[], int nombreZones,
                             Ligne lignes[], int nombreLignes, Troncon troncons[], int nombreTroncons, listeLiaisons l)
{
    for(int i=0; i<nombreZones; i++)
    {
        majPersonnesUneZone(horaireCourant,zones,i,lignes,nombreLignes,troncons,nombreTroncons,l);
    }
}
int calculerGainNet(Bus flotteBus[], int nombreBus, Ligne lignes[], int nombreLignes)
{
    int gain=0;
    for(int i=0; i<nombreBus; i++)
    {
        for(int j=0; j<flotteBus[i].nombreTickets; j++)
            gain+=flotteBus[i].tickets[j].prix;
    }
    return gain;
}
void afficherStatistiques(Bus flotteBus[], int nombreBus, Ligne lignes[], int nombreLignes)
{
    for(int i=0; i<nombreBus; i++)
    {
        int gain=0;
        for(int j=0; j<flotteBus[i].nombreTickets; j++)
        {
            gain+=flotteBus[i].tickets[j].prix;
        }
        printf("Le gain total du bus %d est : %d\n",i,gain);
    }
    printf("Le gain net est: %d\n",calculerGainNet(flotteBus,nombreBus,lignes,nombreLignes));
}
void sauvegarderRapport(char* nomFichier, Zone zones[], Ligne lignes[], Troncon troncons[], Bus
                        flotteBus[], int nombreZones, int nombreLignes, int nombreTroncons, int nombreBus)
{
    FILE *fic = fopen("Statistique.txt", "w");
    if (fic == NULL)
        exit(1);
    for(int i=0; i<nombreBus; i++)
    {
        int gain=0;
        for(int j=0; j<flotteBus[i].nombreTickets; j++)
        {
            gain+=flotteBus[i].tickets[j].prix;
        }
        fprintf(fic,"%d\n",gain);
    }
    fclose(fic);
}
void embarquerPersonnes(Zone zones[], Bus flotteBus[], int idZone, int idBus, Horaire horaireCourant)
{
    //checrher la file correspondante
    if(flotteBus[idBus].enRoute==1)
    {
        celluleFile *p=zones[idZone].listeFilesPassagersEnAttente;
        while ((p != NULL) && ((flotteBus[idBus].idLigneCourante != p->idLigne) || (flotteBus[idBus].sensCourant != p->sens)))
        {
            p = p->suivant;
        }
        if(p!=NULL)
        {
            emplacement* current=p->file.tete;
            int nbPlacesVidesBus=300-flotteBus[idBus].nombrePassagers;
            while((nbPlacesVidesBus!=0) && (current != NULL))
            {
                nbPlacesVidesBus--;
                current->tk.idBus=idBus;
                current->tk.horaireEmbarquement.jour=horaireCourant.jour;
                current->tk.horaireEmbarquement.heure=horaireCourant.heure;
                current->tk.horaireEmbarquement.minute=horaireCourant.minute;
                flotteBus[idBus].tickets[flotteBus[idBus].nombreTickets]=current->tk;
                flotteBus[idBus].nombreTickets++;
                //checrher la pesronne à déplacer
                int i=0;
                while(zones[idZone].personnes[i].cin != current->cinPersonne)
                {
                    i++;
                }
                deplacerPersonne(zones[idZone].personnes,flotteBus[idBus].passagers,i,&zones[idZone].nombrePersonnes
                                 ,&flotteBus[idBus].nombrePassagers);
                defilerFilePassagers(&p->file);
                current=current->suivant;
            }
        }
    }
}
void debarquerPersonnes(Zone zones[], Bus flotteBus[], int idZone, int idBus,Horaire horaireCourant,
                        Ligne lignes[])
{
    int j;
    for(int i=0; i<flotteBus[idBus].nombrePassagers; i++)
    {
        if(flotteBus[idBus].passagers[i].destinationsIntermediaires!=NULL && flotteBus[idBus].passagers[i].destinationsIntermediaires->idZoneDest == idZone)
        {
            //Personne tempPersonne = flotteBus[idBus].passagers[i];

            deplacerPersonne(flotteBus[idBus].passagers,zones[idZone].personnes,i,&flotteBus[idBus].nombrePassagers,
                             &zones[idZone].nombrePersonnes);
            j=zones[idZone].nombrePersonnes-1;

            depilerPileDestinations(&zones[idZone].personnes[j].destinationsIntermediaires);
            if(zones[idZone].personnes[j].destinationsIntermediaires==NULL)
            {
                zones[idZone].personnes[j].intentionVoyage=0;
            }
            else
            {
                zones[idZone].personnes[j].idZoneCourante=idZone;
                prochaineDestinationIntermediaire(&zones[idZone].personnes[j].destinationsIntermediaires,
                                                  &zones[idZone].personnes[j].idLigneCourante,&zones[idZone].personnes[j].idZoneDest);
                zones[idZone].personnes[j].sensCourant=rechercherSens(zones[idZone].personnes[j].idZoneCourante,zones[idZone].personnes[j].idZoneDest
                                                       ,zones[idZone].personnes[j].idLigneCourante,lignes);
            }
        }
    }
}
void deplacertEtReinitialiserTicketsBus(Bus flotteBus[],int nombreBus, Ticket tickets[],int *nombreTickets)
{
    //Deplacement des tickets vers le tableau Ticket
    for(int i=0; i<nombreBus; i++)
    {
        for(int j=0; j<flotteBus[i].nombreTickets; j++)
        {
            tickets[*nombreTickets]=flotteBus[i].tickets[j];
            (*nombreTickets)++;
        }
    }
    //Reinisialisation des tableaux Tickets des bus
    for(int i=0; i<nombreBus; i++)
    {
        for(int j=0; j<flotteBus[i].nombreTickets; j++)
        {
            flotteBus[i].tickets[j].dateVente.jour=-1;
            flotteBus[i].tickets[j].dateVente.heure=-1;
            flotteBus[i].tickets[j].dateVente.minute=-1;
            flotteBus[i].tickets[j].distance=-1;
            flotteBus[i].tickets[j].idBus=-1;
            flotteBus[i].tickets[j].idLigne=-1;
            flotteBus[i].tickets[j].prix=-1;
            flotteBus[i].tickets[j].sens=-1;
            flotteBus[i].tickets[j].zoneDest=-1;
            flotteBus[i].tickets[j].zoneSrc=-1;
        }
        flotteBus[i].nombreTickets=0;
    }
}

void deroulerMinute(int m,int h,int j,SDL_Surface *ecran,Casecarte carteGeographique[40][40], Ticket tickets[], Zone zones[], Ligne lignes[], Troncon
                    troncons[], Bus flotteBus[], int nombreZones, int nombreLignes, int nombreTroncons, int nombreBus,int*nombreTickets, listeLiaisons l,TTF_Font *font, SDL_Color couleurTexte)
{
    Horaire now;
    int i,k,v,counter=0;
    now.minute=m;
    now.heure=h;
    now.jour=j;

    majPersonnesToutesZones(now,zones,nombreZones,lignes,nombreLignes,troncons,nombreTroncons,l);
    for(i=0; i<nombreBus; i++)
    {
        if(flotteBus[i].enRoute==0)
        {
            k=numTacheSuivante(now,i,flotteBus);
            if(k!=-1)
            {
                //Maj du bus
                flotteBus[i].enRoute=1;
                flotteBus[i].idLigneCourante=flotteBus[i].taches[k].idLigne;
                flotteBus[i].sensCourant=flotteBus[i].taches[k].sens;


            }
        }
        if(flotteBus[i].row==zones[flotteBus[i].idZoneCourante].row && flotteBus[i].column==zones[flotteBus[i].idZoneCourante].column)
        {
            debarquerPersonnes(zones,flotteBus,zones[flotteBus[i].idZoneCourante].id,i,now,lignes);
            embarquerPersonnes(zones,flotteBus,zones[flotteBus[i].idZoneCourante].id,i,now);
        }
        if(flotteBus[i].enRoute==1)
        {
            deplacerBus(carteGeographique,i,zones,lignes,troncons,flotteBus,nombreZones,nombreLignes,nombreTroncons,nombreBus,now);
            sauvegardeComplete(zones,lignes,troncons,flotteBus,nombreZones,nombreLignes,nombreTroncons,nombreBus,l,"Sauvgard.txt");

        }
        if(h==20 && m==59)
        {
           //afficherStatistiques(flotteBus,nombreBus,lignes,nombreLignes);
           sauvegarderRapport("Statistique.txt",zones,lignes,troncons,flotteBus,nombreZones,nombreLignes,nombreTroncons,nombreBus);
           deplacertEtReinitialiserTicketsBus(flotteBus,nombreBus,tickets,nombreTickets);
        }
    }
}

void afficherMenuEtTemps(SDL_Surface *tab[],SDL_Surface *ecran, TTF_Font *font, int indiceVitesse, int j, int h, int m, SDL_Color noir, SDL_Color rouge) {

    // Affichage du temps avec l'image en arrière-plan
        char texteAffiche[50];
        sprintf(texteAffiche, "0%d           %2d           %2d", j, h, m);

        // Charger et bliter l'image (arrière-plan)
        SDL_Surface *imagee = IMG_Load("Time.png");

        /*for(int i=0;i<3;i++){
            positionTexteTempsImage.x = 500+i*80;  // Position horizontale sur l'écran
            positionTexteTempsImage.y = 20;   // Position verticale sur l'écran
            SDL_BlitSurface(imagee, NULL, ecran, &positionTexteTempsImage);
        }
        SDL_FreeSurface(imagee);*/

        char *phrase[3];
        phrase[0]="Jour";
        phrase[1]="Heure";
        phrase[2]="Minute";
        SDL_Rect positionTexte;
        for(int i=0;i<3;i++){
            SDL_Surface *surfaceTexte = TTF_RenderText_Blended(font, phrase[i], noir);
            positionTexte.x=530+i*90;
            positionTexte.y=100;
            SDL_BlitSurface(surfaceTexte,NULL,ecran,&positionTexte);
            SDL_FreeSurface(surfaceTexte);
        }
        SDL_Rect positionTexteTempsImage;
        positionTexteTempsImage.x=515;
        positionTexteTempsImage.y=0;
        SDL_BlitSurface(imagee, NULL, ecran, &positionTexteTempsImage);


        // Créer et bliter le texte (premier plan)
        SDL_Rect positionTexteTemps;
        positionTexteTemps.x = 550;
        positionTexteTemps.y = 40;
        SDL_Surface *surfaceTexteTemps = TTF_RenderText_Blended(font, texteAffiche, noir);
        SDL_BlitSurface(surfaceTexteTemps, NULL, ecran, &positionTexteTemps);
        SDL_FreeSurface(surfaceTexteTemps);


    // Affichage de la légende "Vitesse"
    char texteVitesse[50] = "Vitesse";

    SDL_Surface *surfaceTexteVitesse = TTF_RenderText_Blended(font, texteVitesse, noir);
    SDL_Rect positionTexteVitesse;
    positionTexteVitesse.x = 1490;  // Position horizontale
    positionTexteVitesse.y = 220;   // Position verticale
    SDL_BlitSurface(surfaceTexteVitesse, NULL, ecran, &positionTexteVitesse);
    SDL_FreeSurface(surfaceTexteVitesse);


    // Affichage du menu des vitesses
    int y_depart = 300;
    for (int i = 0; i < 5; i++) {
        SDL_Rect positionImage;
        positionImage.x=1470;
        positionImage.y=y_depart+i*80;
        if(i==indiceVitesse){
            SDL_BlitSurface(tab[i+5],NULL,ecran,&positionImage);
        }
        else{
            SDL_BlitSurface(tab[i],NULL,ecran,&positionImage);
        }
    }

}

    int main(int argc, char *argv[])
    {
        Zone *zones=malloc(sizeof(Zone)*20);
        Ligne *lignes=malloc(sizeof(Ligne)*3);
        Troncon *troncons=malloc(sizeof(Troncon)*19);
        Bus *flotteBus=malloc(sizeof(Bus)*18);
        Ticket *tickets=malloc(sizeof(Ticket)*20000);
        Casecarte carteGeographique[40][40];

        listeLiaisons liaisons;
        liaisons.premier = NULL;
        liaisons.dernier = NULL;
        int nombreZones,nombreLignes,choix,nombreTroncons,nombreBus,nombreTickets,m=0,h=6,j=0;

        int continuer = 1;
        SDL_Surface *ecran = NULL, *menu = NULL;
        SDL_Rect positionMenu;
        SDL_Event event;
        TTF_Font* font = NULL;

        SDL_Surface* texte = NULL;

        image images;
        images.bus=IMG_Load("bus.png");
        images.busM=IMG_Load("busM.jpeg");
        images.codeRue10=IMG_Load("codeRue5.jpg");
        images.codeRue12=IMG_Load("codeRue12.jpg");
        images.codeRue15=IMG_Load("codeRue15.jpg");
        images.codeRue3=IMG_Load("codeRue3.jpg");
        images.codeRue5=IMG_Load("codeRue10.jpg");
        images.codeRue6=IMG_Load("codeRue6.jpg");
        images.codeRue7=IMG_Load("codeRue7.jpg");
        images.codeRue9=IMG_Load("codeRue9.jpg");
        images.zoneVide=IMG_Load("zoneVide.png");
        images.zoneNonVideBM=IMG_Load("zoneNonVideBM.png");
        images.zoneNonVideBus=IMG_Load("zoneNonVideBus.png");
        images.OptionJeu=IMG_Load("OptionJeu.png");
        images.OptionCharger=IMG_Load("OptionCharger.png");

        SDL_Surface* tabImages[10];

        tabImages[0] = IMG_Load("1Minute.png");
        tabImages[1] = IMG_Load("10Minutes.png");
        tabImages[2] = IMG_Load("1Heure.png");
        tabImages[3] = IMG_Load("4Heures.png");
        tabImages[4] = IMG_Load("1Jour.png");
        tabImages[5] = IMG_Load("1Minuteclique.png");
        tabImages[6] = IMG_Load("10Minutesclique.png");
        tabImages[7] = IMG_Load("1Heureclique.png");
        tabImages[8] = IMG_Load("4Heuresclique.png");
        tabImages[9] = IMG_Load("1Jourclique.png");

        SDL_Init(SDL_INIT_VIDEO);

        SDL_WM_SetIcon(IMG_Load("bus.png"), NULL); // L'icône doit être chargée avant SDL_SetVideoMode
        ecran = SDL_SetVideoMode(1800, 800, 32, SDL_HWSURFACE | SDL_DOUBLEBUF);//ici les dimensions de l'écran
        SDL_WM_SetCaption("SRTB", NULL);
        int indiceOption=0,indiceVitesse=0,numecran=0;

        menu = IMG_Load("Ville.png");

        positionMenu.x = 0;
        positionMenu.y = 0;

        // texte
        TTF_Init();
        font = TTF_OpenFont("Roboto-Regular.ttf", 25);

        SDL_Color noir = {0, 0, 0};
        SDL_Color blanc = { 255, 255, 255 };
        SDL_Color rouge = { 255, 0, 0 };
        SDL_Rect positionText;


         remplissageComplet(zones, lignes, troncons, flotteBus, &nombreZones, &nombreLignes, &nombreTroncons, &nombreBus, &liaisons);
         initialiserCarte(carteGeographique,zones,lignes,troncons,flotteBus,nombreZones,nombreLignes,nombreTroncons,nombreBus);

        while (continuer)
        {
            SDL_WaitEvent(&event);
          switch (event.type) {
        case SDL_QUIT:
            continuer = 0;
            break;

        case SDL_KEYDOWN:
            switch (event.key.keysym.sym) {
                case SDLK_ESCAPE:
                if (numecran == 1) {
                    numecran = 0; // Revenir à l'écran numéro 0
                } else if (numecran == 0) {
                    continuer = 0; // Quitter le programme
                }
                break;
            }
            break;

        case SDL_MOUSEBUTTONDOWN :
        if (event.button.button == SDL_BUTTON_LEFT ) {
            int x = event.button.x;
            int y = event.button.y;
            if (numecran == 0) {
                if ((x >= 680 && x <= 760) && (y >= 630 && y <= 710)) {
                    indiceOption = 0;
                } else if ((x >= 680 && x <= 760) && (y >= 710 && y <= 790)) {
                    indiceOption = 1;
                }
                if (indiceOption == 0) {
                    genererPersonne(zones, nombreZones, lignes, nombreLignes);
                    numecran = 1;
                } else {
                    chargerPersonnes(zones, &nombreZones, "personnesSauv.txt");
                    numecran = 1;
                }
            } else {
                if((x>=1470 && x<=1550) && (y>=300 && y<=380)){
                    indiceVitesse=0;
                }
                else if((x>=1470 && x<=1550) && (y>=380 && y<=460)){
                    indiceVitesse=1;
                }
                else if((x>=1470 && x<=1550) && (y>=460 && y<=540)){
                    indiceVitesse=2;
                }
                else if((x>=1470 && x<=1550) && (y>=540 && y<=620)){
                    indiceVitesse=3;
                }
                else if((x>=1470 && x<=1550) &&(y>=620 && y<=800)){
                    indiceVitesse=4;
                }
                if(indiceVitesse==0){
                        deroulerMinute(m, h, j, ecran, carteGeographique, tickets, zones, lignes, troncons, flotteBus, nombreZones, nombreLignes, nombreTroncons, nombreBus, &nombreTickets, liaisons, font, noir);
                        afficherCarteGeo(images,ecran,carteGeographique,zones,flotteBus,nombreZones,nombreLignes,nombreTroncons,nombreBus,noir,font);
                        m++;
                        if(m==59){
                            h++;
                            m=0;
                        }
                        if(m==59 && h==21){
                            m=0;
                            h=6;
                            j++;
                        }
                }
                else if(indiceVitesse==1){
                    int counter=10;
                     while(counter--){
                        afficherCarteGeo(images,ecran,carteGeographique,zones,flotteBus,nombreZones,nombreLignes,nombreTroncons,nombreBus,noir,font);
                        deroulerMinute(m, h, j, ecran, carteGeographique, tickets, zones, lignes, troncons, flotteBus, nombreZones, nombreLignes, nombreTroncons, nombreBus, &nombreTickets, liaisons, font, noir);
                        m++;
                        if(m==59){
                            h++;
                            m=0;
                        }
                        if(m==59 && h==21){
                                m=0;
                                h=6;
                                j++;
                        }
                       afficherMenuEtTemps(tabImages,ecran, font, indiceVitesse, j, h, m, noir, rouge);

                        SDL_Delay(5000/60);
                        SDL_Flip(ecran);
                    }
                }
                else if(indiceVitesse==2){
                    int counter=59;
                        while(counter--){
                            afficherCarteGeo(images,ecran,carteGeographique,zones,flotteBus,nombreZones,nombreLignes,nombreTroncons,nombreBus,noir,font);
                            deroulerMinute(m, h, j, ecran, carteGeographique, tickets, zones, lignes, troncons, flotteBus, nombreZones, nombreLignes, nombreTroncons, nombreBus, &nombreTickets, liaisons, font, noir);
                            m++;
                            if(m==59){
                                h++;
                                m=0;
                            }
                            if(m==59 && h==21){
                                m=0;
                                h=6;
                                j++;
                            }
                            afficherMenuEtTemps(tabImages,ecran, font, indiceVitesse, j, h, m, noir, rouge);

                            SDL_Delay(5000/60);
                            SDL_Flip(ecran);
                    }
                }
                else if(indiceVitesse==3){
                        int counter=236;
                       while(counter--){
                            afficherCarteGeo(images,ecran,carteGeographique,zones,flotteBus,nombreZones,nombreLignes,nombreTroncons,nombreBus,noir,font);
                            deroulerMinute(m, h, j, ecran, carteGeographique, tickets, zones, lignes, troncons, flotteBus, nombreZones, nombreLignes, nombreTroncons, nombreBus, &nombreTickets, liaisons, font, noir);
                            m++;
                            if(m==59){
                                h++;
                                m=0;
                            }
                            if(m==59 && h==21){
                                m=0;
                                h=6;
                                j++;
                            }

                            afficherMenuEtTemps(tabImages,ecran, font, indiceVitesse, j, h, m, noir, rouge);

                            SDL_Delay(2000/60);
                            SDL_Flip(ecran);
                    }
                }
                else{
                    int counter=944;
                       while(counter--){
                            afficherCarteGeo(images,ecran,carteGeographique,zones,flotteBus,nombreZones,nombreLignes,nombreTroncons,nombreBus,noir,font);
                            deroulerMinute(m, h, j, ecran, carteGeographique, tickets, zones, lignes, troncons, flotteBus, nombreZones, nombreLignes, nombreTroncons, nombreBus, &nombreTickets, liaisons, font, noir);
                            m++;
                            if(m==59){
                                h++;
                                m=0;
                            }
                            if(m==0 && h==22){
                                m=0;
                                h=6;
                                j++;
                            }

                            afficherMenuEtTemps(tabImages,ecran, font, indiceVitesse, j, h, m, noir, rouge);

                            //SDL_Delay(2000/60);
                            SDL_Flip(ecran);
                    }
                }
            }
        }
        break;
}

            // éffacement de l'écran
            SDL_FillRect(ecran, NULL, SDL_MapRGB(ecran->format, 255, 255, 255));
            // attachement de l'image du menu à l'écran
            SDL_BlitSurface(menu, NULL, ecran, &positionMenu);

                if(numecran==0){
                    for(int i=0;i<2;i++){
                        SDL_Rect positionMenuJeu;
                        positionMenuJeu.x=680;
                        positionMenuJeu.y=630+i*80;
                        if(i==0)
                            SDL_BlitSurface(images.OptionJeu,NULL,ecran,&positionMenuJeu);
                        else
                            SDL_BlitSurface(images.OptionCharger,NULL,ecran,&positionMenuJeu);
                        }
                } else{
                    afficherCarteGeo(images,ecran,carteGeographique,zones,flotteBus,nombreZones,nombreLignes,nombreTroncons,nombreBus,noir,font);
                    afficherMenuEtTemps(tabImages,ecran, font, indiceVitesse, j, h, m, noir, rouge);

                }
            //Mise à jour de l'écran
            SDL_Flip(ecran);
        }

        SDL_FreeSurface(texte);

        TTF_CloseFont(font);
        SDL_FreeSurface(menu);

        TTF_Quit();
        SDL_Quit();

        free(zones);
        free(lignes);
        free(troncons);
        free(flotteBus);
        free(tickets);

        //libérer les images
        SDL_FreeSurface(images.bus);
        SDL_FreeSurface(images.busM);
        SDL_FreeSurface(images.zoneVide);
        SDL_FreeSurface(images.zoneNonVideBus);
        SDL_FreeSurface(images.zoneNonVideBM);
        SDL_FreeSurface(images.codeRue3);
        SDL_FreeSurface(images.codeRue12);
        SDL_FreeSurface(images.codeRue15);
        SDL_FreeSurface(images.codeRue6);
        SDL_FreeSurface(images.codeRue7);
        SDL_FreeSurface(images.codeRue9);
        SDL_FreeSurface(images.codeRue10);
        SDL_FreeSurface(images.OptionJeu);
        SDL_FreeSurface(images.OptionCharger);
        SDL_FreeSurface(images.Minute);
        SDL_FreeSurface(images.Minuteclique);
        SDL_FreeSurface(images.dixMinutes);
        SDL_FreeSurface(images.dixMinutesclique);

        return EXIT_SUCCESS;
    }
